#!/bin/bash
# Heavily based on https://github.com/thoughtbot/laptop

# https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#index-trap
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

# https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#The-Set-Builtin
set -e

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  # if [ -w "$HOME/.zshrc.local" ]; then
    # zshrc="$HOME/.zshrc.local"
  # else
    # zshrc="$HOME/.zshrc"
  # fi
	zshrc="$HOME/.zshrc"

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list --formulae | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "homebrew/services"
tap "homebrew/cask-fonts"
tap "universal-ctags/universal-ctags"

# Unix
brew "universal-ctags", args: ["HEAD"]
brew "curl"
brew "git"
brew "openssl"
brew "reattach-to-user-namespace"
brew "ripgrep"
brew "tmux"
brew "neovim"
brew "zsh"
brew "chezmoi"
brew "starship"
brew "jq"
brew "fzf"
brew "httpie"
brew "mas"

# Programming language prerequisites and package managers
brew "libyaml" # should come after openssl
brew "coreutils"
brew "yarn"
cask "gpg-suite"

# Apps
cask "iterm2"
cask "hammerspoon"
cask "visual-studio-code"
cask "nova"
cask "rocket"
cask "choosy"
cask "hazel"

# Font
cask "font-fira-code-nerd-font"
EOF

fancy_echo "Installing useful fzf key bindings and fuzzy completion ..."
$(brew --prefix)/opt/fzf/install

fancy_echo "Install global yarn packages ..."
yarn global add prettier

fancy_echo "Install common VSCode extension ..."
code --install-extension dbaeumer.vscode-eslint
code --install-extension esbenp.prettier-vscode
code --install-extension equinusocio.vsc-material-theme

append_to_zshrc 'alias vi=nvim'
append_to_zshrc 'alias vim=nvim'
append_to_zshrc 'eval "$(starship init zsh)"'

if [ ! -f "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim ]; then
  fancy_echo "Install vim-plug for Neovim ..."
  curl -fsSLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

if [ ! -d "$HOME/.asdf" ]; then
  fancy_echo "Configuring asdf version manager ..."
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.0
  append_to_zshrc "source $HOME/.asdf/asdf.sh"
fi

add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
		if [ "$language" == "python" ]; then
			asdf install python 2.7.13
			asdf global python "$version" 2.7.13
		else
			asdf global "$language" "$version"
		fi
  fi
}

source "$HOME/.asdf/asdf.sh"

add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

fancy_echo "Installing latest Node ..."
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs"

add_or_update_asdf_plugin "python" "https://github.com/danhper/asdf-python"
fancy_echo "Installing latest Python ..."
install_asdf_language "python" # latest + v2.7.13

fancy_echo "Installing Neovim python support ..."
pip install neovim && \
pip3 install neovim 

fancy_echo "Installing Neovim NodeJS support ..."
yarn global add neovim

append_to_zshrc '\
if [ -f "$HOME/.zshrc.local" ]; then\
	. "$HOME/.zshrc.local"\
fi\
'

if [ -f "$HOME/.mac.local" ]; then
  fancy_echo "Running your customizations from ~/.mac.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.mac.local"
fi

if [ -f "$HOME/.zshrc.local" ]; then
  . "$HOME/.zshrc.local"
fi
